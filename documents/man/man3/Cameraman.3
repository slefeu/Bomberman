.TH "Cameraman" 3 "Wed Jun 15 2022" "Version 1.0" "Indie Studio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Cameraman
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBMyCameraman\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCameraman\fP () noexcept"
.br
.ti -1c
.RI "\fBCameraman\fP (const \fBCameraman\fP &other) noexcept=delete"
.br
.ti -1c
.RI "\fBCameraman\fP (\fBCameraman\fP &&other) noexcept=delete"
.br
.ti -1c
.RI "\fBCameraman\fP & \fBoperator=\fP (const \fBCameraman\fP &rhs) noexcept=delete"
.br
.ti -1c
.RI "\fBCameraman\fP & \fBoperator=\fP (\fBCameraman\fP &&rhs) noexcept=delete"
.br
.ti -1c
.RI "\fBVector3D\fP \fBgetPosition\fP () const noexcept"
.br
.ti -1c
.RI "\fBVector3D\fP \fBgetTarget\fP () const noexcept"
.br
.ti -1c
.RI "\fBVector3D\fP \fBgetUp\fP () const noexcept"
.br
.ti -1c
.RI "bool \fBgetIsMoving\fP () const noexcept"
.br
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector3D\fP &pos) noexcept"
.br
.ti -1c
.RI "void \fBsetIsMoving\fP (bool isMoving) noexcept"
.br
.ti -1c
.RI "void \fBbegin3D\fP () const noexcept"
.br
.ti -1c
.RI "void \fBend3D\fP () const noexcept"
.br
.ti -1c
.RI "void \fBmoveTo\fP (const \fBVector3D\fP &to, const \fBVector3D\fP &target, const \fBVector3D\fP &up) noexcept"
.br
.ti -1c
.RI "void \fBtpTo\fP (const \fBVector3D\fP &to, const \fBVector3D\fP &target, const \fBVector3D\fP &up) noexcept"
.br
.ti -1c
.RI "bool \fBsmoothMove\fP () noexcept"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBmoveX\fP (float x) noexcept"
.br
.ti -1c
.RI "void \fBmoveY\fP (float y) noexcept"
.br
.ti -1c
.RI "void \fBmoveZ\fP (float z) noexcept"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "Camera3D \fBcamera_\fP"
.br
.ti -1c
.RI "bool \fBis_moving_\fP = false"
.br
.ti -1c
.RI "float \fBspeed_\fP"
.br
.ti -1c
.RI "\fBVector3D\fP \fBposition_\fP"
.br
.ti -1c
.RI "\fBVector3D\fP \fBtarget_\fP"
.br
.ti -1c
.RI "\fBVector3D\fP \fBup_\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Cameraman::Cameraman ()\fC [noexcept]\fP"
The constructor initializes the camera's field of view to 60 degrees and sets the projection to perspective 
.SH "Member Function Documentation"
.PP 
.SS "void Cameraman::begin3D () const\fC [noexcept]\fP"
It sets up the camera for 3D rendering 
.SS "void Cameraman::end3D () const\fC [noexcept]\fP"
It ends the 3D mode 
.SS "bool Cameraman::getIsMoving () const\fC [noexcept]\fP"
Returns whether the cameraman is moving\&.
.PP
\fBReturns\fP
.RS 4
A boolean value\&. 
.RE
.PP

.SS "\fBVector3D\fP Cameraman::getPosition () const\fC [noexcept]\fP"
It returns the position of the cameraman
.PP
\fBReturns\fP
.RS 4
A copy of the position_ member variable\&. 
.RE
.PP

.SS "\fBVector3D\fP Cameraman::getTarget () const\fC [noexcept]\fP"
Returns the target of the cameraman\&.
.PP
\fBReturns\fP
.RS 4
A copy of the target_ member variable\&. 
.RE
.PP

.SS "\fBVector3D\fP Cameraman::getUp () const\fC [noexcept]\fP"
Returns the up vector of the cameraman\&.
.PP
\fBReturns\fP
.RS 4
A copy of the up_ vector\&. 
.RE
.PP

.SS "void Cameraman::moveTo (const \fBVector3D\fP & to, const \fBVector3D\fP & target, const \fBVector3D\fP & up)\fC [noexcept]\fP"
It moves the camera to a new position, and sets the target and up vectors
.PP
\fBParameters\fP
.RS 4
\fIto\fP The position of the camera\&. 
.br
\fItarget\fP The point in space that the camera is looking at\&. 
.br
\fIup\fP The up vector of the camera\&. 
.RE
.PP

.SS "void Cameraman::moveX (float x)\fC [protected]\fP, \fC [noexcept]\fP"
It moves the camera in the X direction
.PP
\fBParameters\fP
.RS 4
\fIx\fP The amount to move the camera in the x direction\&. 
.RE
.PP

.SS "void Cameraman::moveY (float y)\fC [protected]\fP, \fC [noexcept]\fP"
It moves the camera in the Y direction
.PP
\fBParameters\fP
.RS 4
\fIy\fP The amount to move the camera in the y direction\&. 
.RE
.PP

.SS "void Cameraman::moveZ (float z)\fC [protected]\fP, \fC [noexcept]\fP"
It moves the camera in the Z axis
.PP
\fBParameters\fP
.RS 4
\fIz\fP The amount to move the camera in the z direction\&. 
.RE
.PP

.SS "void Cameraman::setIsMoving (bool value)\fC [noexcept]\fP"
Sets the value of the is_moving_ member variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The new value of the is_moving_ variable\&. 
.RE
.PP

.SS "void Cameraman::setPosition (const \fBVector3D\fP & pos)\fC [noexcept]\fP"
It sets the position of the camera
.PP
\fBParameters\fP
.RS 4
\fIpos\fP The position of the camera\&. 
.RE
.PP

.SS "bool Cameraman::smoothMove ()\fC [noexcept]\fP"
It moves the camera towards the target position, and returns true if the camera is still moving
.PP
\fBReturns\fP
.RS 4
A boolean\&. 
.RE
.PP

.SS "void Cameraman::tpTo (const \fBVector3D\fP & to, const \fBVector3D\fP & tar, const \fBVector3D\fP & newUp)\fC [noexcept]\fP"
It teleports the camera to a new position, target and up vector
.PP
\fBParameters\fP
.RS 4
\fIto\fP the new position of the camera 
.br
\fItar\fP the target point of the camera 
.br
\fInewUp\fP the new up vector of the camera\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Indie Studio from the source code\&.
