.TH "SoundManager" 3 "Wed Jun 15 2022" "Version 1.0" "Indie Studio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoundManager
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoundManager\fP (const std::string &path) noexcept"
.br
.ti -1c
.RI "\fBSoundManager\fP (const \fBSoundManager\fP &other) noexcept=delete"
.br
.ti -1c
.RI "\fBSoundManager\fP (\fBSoundManager\fP &&other) noexcept"
.br
.ti -1c
.RI "\fB~SoundManager\fP () noexcept"
.br
.ti -1c
.RI "\fBSoundManager\fP & \fBoperator=\fP (const \fBSoundManager\fP &rhs) noexcept=delete"
.br
.ti -1c
.RI "\fBSoundManager\fP & \fBoperator=\fP (\fBSoundManager\fP &&rhs) noexcept"
.br
.ti -1c
.RI "void \fBunload\fP () noexcept"
.br
.ti -1c
.RI "void \fBplay\fP () const noexcept"
.br
.ti -1c
.RI "void \fBsetVolume\fP (float volume) noexcept"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoundManager::SoundManager (const std::string & path)\fC [explicit]\fP, \fC [noexcept]\fP"
It loads a sound from a file and sets the volume to 1
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path to the sound file\&. 
.RE
.PP

.SS "SoundManager::SoundManager (\fBSoundManager\fP && other)\fC [noexcept]\fP"
'Move the sound from the other SoundManager into this one, and mark the other one as unloaded\&.'
.PP
The first line of the function is the function declaration\&. It's a move constructor, so it takes a \fBSoundManager\fP&& as a parameter\&. The && is a reference to a reference, which is a rvalue reference\&. A rvalue reference is a reference to a temporary object
.PP
\fBParameters\fP
.RS 4
\fIother\fP The \fBSoundManager\fP object to move from\&. 
.RE
.PP

.SS "SoundManager::~SoundManager ()\fC [noexcept]\fP"
It calls the \fBunload()\fP function 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoundManager\fP & SoundManager::operator= (\fBSoundManager\fP && rhs)\fC [noexcept]\fP"
'Move the sound from the right hand side to the left hand side, and mark the right hand side as
unloaded\&.'
.PP
The first thing we do is move the sound from the right hand side to the left hand side\&. This is done by calling the move assignment operator of the \fCstd::unique_ptr\fP class\&. This will move the sound from the right hand side to the left hand side, and set the right hand side to null
.PP
\fBReturns\fP
.RS 4
A reference to the object that called the function\&. 
.RE
.PP

.SS "void SoundManager::play () const\fC [noexcept]\fP"
PlaySound() is a Windows API function that plays a sound 
.SS "void SoundManager::setVolume (float value)\fC [noexcept]\fP"
It sets the volume of the sound
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The volume to set the sound to\&. 
.RE
.PP

.SS "void SoundManager::unload ()\fC [noexcept]\fP"
If the sound is not unloaded, unload it and set the unloaded flag to true\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Indie Studio from the source code\&.
