.TH "Sprite" 3 "Wed Jun 15 2022" "Version 1.0" "Indie Studio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Sprite
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSprite\fP (const std::string_view &path) noexcept"
.br
.ti -1c
.RI "\fBSprite\fP (const std::string_view &path, float x, float y) noexcept"
.br
.ti -1c
.RI "\fBSprite\fP (const std::string_view &path, float x, float y, float scale) noexcept"
.br
.ti -1c
.RI "\fBSprite\fP (const std::string_view &path, float x, float y, float scale, bool display) noexcept"
.br
.ti -1c
.RI "\fBSprite\fP (const \fBSprite\fP &other) noexcept=default"
.br
.ti -1c
.RI "\fBSprite\fP (\fBSprite\fP &&other) noexcept"
.br
.ti -1c
.RI "\fB~Sprite\fP () noexcept"
.br
.ti -1c
.RI "\fBSprite\fP & \fBoperator=\fP (const \fBSprite\fP &rhs) noexcept=default"
.br
.ti -1c
.RI "\fBSprite\fP & \fBoperator=\fP (\fBSprite\fP &&rhs) noexcept"
.br
.ti -1c
.RI "void \fBdraw\fP () const noexcept"
.br
.ti -1c
.RI "void \fBdraw\fP (const std::array< unsigned char, 3 > &color) const noexcept"
.br
.ti -1c
.RI "void \fBdraw\fP (const std::array< unsigned char, 4 > &color) const noexcept"
.br
.ti -1c
.RI "int \fBgetPosX\fP () const noexcept"
.br
.ti -1c
.RI "int \fBgetPosY\fP () const noexcept"
.br
.ti -1c
.RI "float \fBgetWidth\fP () const noexcept"
.br
.ti -1c
.RI "float \fBgetHeight\fP () const noexcept"
.br
.ti -1c
.RI "void \fBsetPos\fP (float x, float y) noexcept"
.br
.ti -1c
.RI "void \fBsetScale\fP (float scale) noexcept"
.br
.ti -1c
.RI "bool \fBgetDisplay\fP () const noexcept"
.br
.ti -1c
.RI "void \fBinvertDisplay\fP () noexcept"
.br
.ti -1c
.RI "void \fBunload\fP () noexcept"
.br
.ti -1c
.RI "void \fBsetDisplay\fP (bool value) noexcept"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Sprite::Sprite (const std::string_view & path)\fC [noexcept]\fP"
It loads an image from a file, creates a texture from the image, and sets the position and scale to default values
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path to the image file\&. 
.RE
.PP

.SS "Sprite::Sprite (const std::string_view & path, float x, float y)\fC [noexcept]\fP"
It loads an image from a file, creates a texture from the image, and stores the texture in a member variable
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path to the image file\&. 
.br
\fIx\fP The x position of the sprite\&. 
.br
\fIy\fP The y coordinate of the sprite\&. 
.RE
.PP

.SS "Sprite::Sprite (const std::string_view & path, float x, float y, float scale)\fC [noexcept]\fP"
It loads an image from a file, creates a texture from the image, and stores the texture, the image, and the position and scale of the sprite
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path to the image file\&. 
.br
\fIx\fP The x position of the sprite\&. 
.br
\fIy\fP The y position of the sprite\&. 
.br
\fIscale\fP The scale of the sprite\&. 
.RE
.PP

.SS "Sprite::Sprite (const std::string_view & path, float x, float y, float scale, bool display)\fC [noexcept]\fP"
It loads an image from a file, creates a texture from that image, and stores the texture, the image, the position, the scale, and whether or not the sprite is displayed
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The path to the image file\&. 
.br
\fIx\fP The x position of the sprite\&. 
.br
\fIy\fP The y position of the sprite\&. 
.br
\fIscale\fP The scale of the sprite\&. 
.br
\fIdisplay\fP If true, the sprite will be displayed on the screen\&. 
.RE
.PP

.SS "Sprite::Sprite (\fBSprite\fP && other)\fC [noexcept]\fP"
'Move the other sprite into this sprite, and mark the other sprite as unloaded\&.'
.PP
The first thing we do is move the image and texture from the other sprite into this sprite\&. This is done using the move assignment operator, which is a member function of the image and texture classes
.PP
\fBParameters\fP
.RS 4
\fIother\fP The other sprite to move from\&. 
.RE
.PP

.SS "Sprite::~Sprite ()\fC [noexcept]\fP"
The destructor unloads the sprite\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Sprite::draw () const\fC [noexcept]\fP"
If the sprite is displayed, draw it 
.SS "void Sprite::draw (const std::array< unsigned char, 3 > & color) const\fC [noexcept]\fP"
It draws the sprite to the screen
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP The color to draw the sprite with\&. 
.RE
.PP

.SS "void Sprite::draw (const std::array< unsigned char, 4 > & color) const\fC [noexcept]\fP"
It draws the sprite to the screen
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP The color to draw the sprite with\&. 
.RE
.PP

.SS "bool Sprite::getDisplay () const\fC [noexcept]\fP"
\fCbool \fBSprite::getDisplay() const \fPnoexcept\fP
.PP
This function returns a boolean value\&. It is a member function of the class \fBSprite\fP\&. It is a const function, meaning it does not modify the object\&. It is a noexcept function, meaning it does not throw exceptions
.PP
\fBReturns\fP
.RS 4
The value of the displayed_ variable\&. 
.RE
.PP

.SS "float Sprite::getHeight () const\fC [noexcept]\fP"
It returns the height of the sprite
.PP
\fBReturns\fP
.RS 4
The height of the texture\&. 
.RE
.PP

.SS "int Sprite::getPosX () const\fC [noexcept]\fP"
This function returns the value of the private member variable pos_x_\&.
.PP
\fBReturns\fP
.RS 4
The value of the private member variable pos_x_\&. 
.RE
.PP

.SS "int Sprite::getPosY () const\fC [noexcept]\fP"
This function returns the y position of the sprite\&.
.PP
\fBReturns\fP
.RS 4
The value of the private member variable pos_y_\&. 
.RE
.PP

.SS "float Sprite::getWidth () const\fC [noexcept]\fP"
It returns the width of the sprite\&.
.PP
\fBReturns\fP
.RS 4
The width of the texture\&. 
.RE
.PP

.SS "void Sprite::invertDisplay ()\fC [noexcept]\fP"
It inverts the value of the displayed_ member variable 
.SS "\fBSprite\fP & Sprite::operator= (\fBSprite\fP && rhs)\fC [noexcept]\fP"
'Move the data from the right hand side to the left hand side, and set the right hand side to
unloaded\&.'
.PP
The first thing we do is move the data from the right hand side to the left hand side\&. This is done by using the \fCstd::move\fP function\&. This function takes an object and returns a reference to that object\&. The reference is an rvalue reference, which means that it can only be used on the right hand side of an assignment\&. This is important because it means that the object can be moved from
.PP
\fBReturns\fP
.RS 4
A reference to the object that was assigned to\&. 
.RE
.PP

.SS "void Sprite::setDisplay (bool value)\fC [noexcept]\fP"
\fCsetDisplay\fP sets the \fCdisplayed_\fP member variable to the value of the \fCvalue\fP parameter
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The new value for the displayed_ variable\&. 
.RE
.PP

.SS "void Sprite::setPos (float x, float y)\fC [noexcept]\fP"
Sets the position of the sprite\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP The x position of the sprite\&. 
.br
\fIy\fP The y coordinate of the sprite\&. 
.RE
.PP

.SS "void Sprite::setScale (float scale)\fC [noexcept]\fP"
Sets the scale of the sprite\&.
.PP
\fBParameters\fP
.RS 4
\fIscale\fP The scale of the sprite\&. 
.RE
.PP

.SS "void Sprite::unload ()\fC [noexcept]\fP"
If the sprite is not unloaded, unload the image and texture, and set the unloaded flag to true\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Indie Studio from the source code\&.
